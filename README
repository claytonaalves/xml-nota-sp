Gerador de xml de notas fiscais de serviços de SP.

Este aplicativo gera um arquivo XML com uma listagem de notas fiscais de serviços
para exportação para a prefeitura de São Paulo.

--------------------------------
Dependências:

  * Node v0.10.33 ou posterior (por causa do módulo crypt)
  * lxml (módulo python)
  * forever (módulo nodejs)

--------------------------------

Instalação no servidor

# useradd -m -d /home/node node
# usermod -a -G sudo node

# npm -g install forever


Alterar usuário do processo:

    var express = require("express");
    var server = express.createServer();
    var serverPort = 80;
    var nodeUserGid = "node";
    var nodeUserUid = "node";
     
    server.listen(serverPort, function() {
      process.setgid(nodeUserGid);
      process.setuid(nodeUserUid);
    });


Secondly, your server will need a way to listen for notices telling it to prepare for shutdown and 
respond when ready to shutdown. One way of doing this is to set up an HTTP server on a port only open to localhost, much as follows:

    var server = express.createServer();
    server.listen(10080);
     
    server.get('/prepareForShutdown', function(req, res) {
      if( 
        req.connection.remoteAddress == "127.0.0.1"
        || req.socket.remoteAddress == "127.0.0.1"
        // 0.4.7 oddity in https only
        || req.connection.socket.remoteAddress == "127.0.0.1"
      ) {
          managePreparationForShutdown(function() {
          // don't complete the connection until the preparation is done.
          res.statusCode = 200;
          res.end();
        });
      } else {
        res.statusCode = 500;
        res.end();
      }
    });
     
    var managePreparationForShutdown = function(callback) {
      // perform all the cleanup and other operations needed prior to shutdown,
      // but do not actually shutdown. Call the callback function only when
      // these operations are actually complete.
    };


Thirdly, you will need to include a script with your application that will trigger the 
shutdown preparation. A simple method like the one above could be triggered via curl, 
but you may include more security measures in its use, or otherwise prefer to use Node.js:

    #!/usr/bin/env node
     
    /*
     * Tell the server to gracefully prepare for shutdown, but do not end the process.
     */
     
    console.log("Instructing server to prepare for shutdown");
     
    var http = require("http");
     
    var options = {
      host: "localhost",
      port: 10080,
      path: "/prepareForShutdown",
      method: "HEAD"
    };
     
    var request = https.request(options, function(response) {
      console.log("Server completed preparations for shutdown");
    });
    request.end();
    request.on("error", function(error) {
      throw error;
    });


Set up an init.d Script for Forever

It is easy enough to use Forever to manage a Node.js server as a service via an init.d script. 
The trick is the graceful shutdown, as forever.js simply kills processes when used in this way. 
The following script and setup instructions are good for a Red Hat, Fedora, or similar Linux 
distribution, though you will have to change the paths to suit your application and installation details. 
For example it assumes that your application is packaged with scripts in /scripts/start.js and /scripts/prepareForStop.js 
to start the server and prepare for shutdown respectively.


    #!/bin/bash
    #
    # Service script for a Node.js application running under Forever.
    #
    # This is suitable for Fedora, Red Hat, CentOS and similar distributions.
    # It will not work on Ubuntu or other Debian-style distributions!
    #
    # There is some perhaps unnecessary complexity going on in the relationship between
    # Forever and the server process. See: https://github.com/indexzero/forever
    #
    # 1) Forever starts its own watchdog process, and keeps its own configuration data 
    # in /var/run/forever.
    #
    # 2) If the process dies, Forever will restart it: if it fails but continues to run, 
    # it won't be restarted.
    #
    # 3) If the process is stopped via this script, the pidfile is left in place; this 
    # helps when issues happen with failed stop attempts.
    #
    # 4) Which means the check for running/not running is complex, and involves parsing 
    # of the Forever list output.
    #
    # chkconfig: 345 80 20
    # description: my application description
    # processname: my_application_name
    # pidfile: /var/run/my_application_name.pid
    # logfile: /var/log/my_application_name.log
    #
     
    # Source function library.
    . /etc/init.d/functions
     
    NAME=my_application_name
    SOURCE_DIR=/path/to/my/application/package/scripts
    SOURCE_FILE=start.js
     
    user=node
    pidfile=/var/run/$NAME.pid
    logfile=/var/log/$NAME.log
    forever_dir=/var/run/forever
     
    node=node
    forever=forever
    sed=sed
     
    export PATH=$PATH:/home/node/local/node/bin
    export NODE_PATH=$NODE_PATH:/home/node/local/node/lib/node_modules
     
    start() {
      echo "Starting $NAME node instance: "
     
      if [ "$foreverid" == "" ]; then
        # Create the log and pid files, making sure that 
        # the target use has access to them
        touch $logfile
        chown $user $logfile
     
        touch $pidfile
        chown $user $pidfile
     
        # Launch the application
        daemon --user=root \
          $forever start -p $forever_dir --pidfile $pidfile -l $logfile \
          -a -d $SOURCE_DIR $SOURCE_FILE
        RETVAL=$?
      else
        echo "Instance already running"
        RETVAL=0
      fi
    }
     
    stop() {
      echo -n "Shutting down $NAME node instance : "
      if [ "$foreverid" != "" ]; then
        $node $SOURCE_DIR/prepareForStop.js
        $forever stop -p $forever_dir $id
      else
        echo "Instance is not running";
      fi
      RETVAL=$?
    }
     
    if [ -f $pidfile ]; then
      read pid < $pidfile
    else
      pid = ""
    fi
     
    if [ "$pid" != "" ]; then
      # Gnarly sed usage to obtain the foreverid.
      sed1="/$pid\]/p"
      sed2="s/.*\[\([0-9]\+\)\].*\s$pid\].*/\1/g"
      foreverid=`$forever list -p $forever_dir | $sed -n $sed1 | $sed $sed2`
    else
      foreverid=""
    fi
     
    case "$1" in
      start)
        start
        ;;
      stop)
        stop
        ;;
      status)
        status -p ${pidfile}
        ;;
      *)
        echo "Usage:  {start|stop|status}"
        exit 1
        ;;
    esac
    exit $RETVAL


